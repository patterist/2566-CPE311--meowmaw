// ยังไม่ได้ลองเอาลงบอร์ด ก็อปวางไว้เฉยๆ
// คนผ่านแล้วไฟติด
//ultrasonic trigpin = PA2
//ultrasonic echopin = PA1


void ultra_con(void);
void ultra_tim(void);
void TIM2_IRQHandler(void);
void people_in(void);

uint16_t uwRI = 0;
uint16_t uwFA = 0;
uint16_t uwDiff = 0;
uint16_t uhICIndex = 0;

uint32_t TIM2CLK;
uint32_t PSC;
uint32_t IC1PSC;
float period = 0.0;

int main(void)
{
	SystemClock_Config();
	ultra_con();
	ultra_tim();
	
	while(1){
		LL_GPIO_SetOutputPin(GPIOA , LL_GPIO_PIN_2);
		LL_mDelay(1);
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);

		if(uhICIndex == 2) {
			PSC = LL_TIM_GetPrescaler(TIM2) + 1;
			TIM2CLK = SystemCoreClock / PSC;
			IC1PSC = __LL_TIM_GET_ICPSC_RATIO(LL_TIM_IC_GetPrescaler(TIM2, LL_TIM_CHANNEL_CH2));
			
			period = ((uwDiff *340.0*pow(10,2))/2.0) / SystemCoreClock;
			
			uhICIndex = 0;
		}
		people_in(); //if period can't use, need to send period by function paramiter
		
	}
}

void people_in(void){
	if(period < 10){
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
		//buzzer alert 
	}
	else{
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
		//buzzer alert 
	}
}

void ultra_con(void){
	LL_GPIO_InitTypeDef timic_gp;
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
	
	timic_gp.Mode = LL_GPIO_MODE_ALTERNATE;
	timic_gp.Pull = LL_GPIO_PULL_NO;
	timic_gp.Pin = LL_GPIO_PIN_1 ;
	timic_gp.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	timic_gp.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	timic_gp.Alternate = LL_GPIO_AF_1;
	LL_GPIO_Init(GPIOA, &timic_gp);
	
	
	timic_gp.Mode = LL_GPIO_MODE_OUTPUT;
	timic_gp.Pin = LL_GPIO_PIN_2;
	LL_GPIO_Init(GPIOA, &timic_gp);
	
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	timic_gp.Mode = LL_GPIO_MODE_OUTPUT;
	timic_gp.Pin = LL_GPIO_PIN_6;
	LL_GPIO_Init(GPIOB, &timic_gp);
}

void ultra_tim(void){
	LL_TIM_IC_InitTypeDef timic;
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
	
	timic.ICActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
	timic.ICFilter = LL_TIM_IC_FILTER_FDIV1_N2;
	timic.ICPolarity = LL_TIM_IC_POLARITY_BOTHEDGE;
	timic.ICPrescaler = LL_TIM_ICPSC_DIV1;
	LL_TIM_IC_Init(TIM2, LL_TIM_CHANNEL_CH2, &timic);

	
	NVIC_SetPriority(TIM2_IRQn, 0);
	NVIC_EnableIRQ(TIM2_IRQn);
	LL_TIM_EnableIT_CC2(TIM2);
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);		
	
	LL_TIM_EnableCounter(TIM2);
}

void TIM2_IRQHandler(void){
	if(LL_TIM_IsActiveFlag_CC2(TIM2) == SET){
		LL_TIM_ClearFlag_CC2(TIM2);
		if(uhICIndex == 0){
			uwRI = LL_TIM_IC_GetCaptureCH2(TIM2);
			uhICIndex = 1;
		}
		else if(uhICIndex == 1){
			uwFA = LL_TIM_IC_GetCaptureCH2(TIM2);
		
		if(uwFA > uwRI)
			uwDiff = uwFA-uwRI;
		else if(uwFA < uwRI)
			uwDiff = ((LL_TIM_GetAutoReload(TIM2) - uwRI) + uwFA) +1;
 		uhICIndex = 2;
		}
	}
}
